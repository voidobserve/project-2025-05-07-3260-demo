C51 COMPILER V9.60.7.0   MAIN                                                              07/18/2025 17:47:46 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Release\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) INCDI
                    -R(..\..\Libraries\Include;..\..\User;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\main.lst) O
                    -BJECT(.\Release\Objects\main.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    main.c
   4           * @author  HUGE-IC Application Team
   5           * @version V1.0.0
   6           * @date    01-05-2021
   7           * @brief   Main program body
   8           ******************************************************************************
   9           * @attention
  10           *
  11           * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  12           *
  13           * 版权说明后续补上
  14           *
  15           ******************************************************************************
  16           */
  17          
  18          /* Includes ------------------------------------------------------------------*/
  19          #include "include.h"
  20          #include <stdio.h>
  21          
  22          #include "user_config.h"
  23          
  24          volatile bit_flag flag1 = {0};
  25          volatile bit_flag flag2 = {0};
  26          
  27          // =================================================================
  28          // 充电控制相关变量                                                 //
  29          // =================================================================
  30          volatile u16 bat_adc_val;                                           // 电池电压检测脚采集到的ad值
  31          volatile u16 charging_adc_val;                                      // 充电电压检测脚采集的ad值
  32          volatile u16 current_adc_val;                                       // 充电电流检测脚采集的ad值
  33          volatile u8 flag_is_charging_adjust_time_come = 0;                  // 调节充电的时间到来
  34          volatile u8 cur_charging_pwm_status = CUR_CHARGING_PWM_STATUS_NONE; // 控制充电的PWM状态
  35          volatile u8 cur_charge_phase = CUR_CHARGE_PHASE_NONE;               // 记录当前充电阶段
  36          
  37          // =================================================================
  38          // 指示灯控制相关变量                                               //
  39          // =================================================================
  40          volatile u8 cur_initial_discharge_gear;   // 初始放电挡位（需要记忆）
  41          volatile u8 cur_discharge_rate;           // 初始放电速率（需要记忆）
  42          volatile u8 cur_led_mode;                 // 当前的LED模式
  43          volatile u8 cur_led_gear;                 // 当前led挡位
  44          volatile u8 last_led_gear;                // 上次led挡位
  45          volatile u8 cur_led_gear_in_charging;     // 充电指示，对应的挡位
  46          
  47          volatile bit flag_is_in_setting_mode = 0; // 是否处于设置模式
  48          volatile u8 flag_led_setting_mode_exit_times_come = 0; // 标志位，led退出设置模式的时间到来
  49          volatile u16 led_setting_mode_exit_times_cnt = 0; // 特殊的LED模式，退出时间计数
  50          
  51          volatile bit flag_is_led_mode_exit_enable = 0;      // 是否退出指示灯指示模式
  52          volatile bit flag_is_led_mode_exit_times_come = 0; // 退出指示灯指示模式的时间到来
  53          volatile u16 led_struction_mode_exit_times_cnt = 0; // 退出指示灯指示模式时间计数
C51 COMPILER V9.60.7.0   MAIN                                                              07/18/2025 17:47:46 PAGE 2   

  54          
  55          // =================================================================
  56          // 主灯光控制相关变量                                               //
  57          // =================================================================
  58          volatile u32 light_adjust_time_cnt = 0;    // 调节灯光的时间计数，暂定为每1s加一
  59          volatile u8 light_ctl_phase_in_rate_1 = 1; // 在放电速率M1时，使用到的变量，在计算公式里面用作系数，每次唤
             -醒时需要初始化为1
  60          
  61          // TODO：3260使用16位寄存器，7361使用8位寄存器，要进行适配修改
  62          volatile u16 cur_light_pwm_duty_val = 0; // 当前灯光对应的占空比值
  63          // volatile u16 expect_light_pwm_duty_val = 0;                  // 期望调节到的、灯光对应的占空比值
  64          volatile u8 flag_is_light_adjust_time_come = 0;              // 调节灯光的时间到来，目前为1s
  65          volatile u8 flag_is_light_pwm_duty_val_adjust_time_come = 0; // 灯光占空比值调节时间到来
  66          
  67          volatile u8 flag_is_ctl_light_blink = 0; // 是否控制主灯光闪烁
  68          volatile u8 light_ctl_blink_times = 0;   // 要控制主灯光闪烁的次数
  69          /*
  70              是否要在设置模式期间关闭主灯光
  71          
  72              如果已经关灯，在设置模式期间，主灯闪烁完成后，直接关灯
  73          */
  74          volatile bit flag_allow_light_in_setting_mode = 0;
  75          
  76          // 短按减小灯光亮度，对应各个挡位亮度的占空比值
  77          const u16 light_pwm_sub_table[9] = {
  78              (u16)((u32)TIMER2_FEQ * 8367 / 10000), // 83.67 %
  79              (u16)((u32)TIMER2_FEQ * 7371 / 10000), // 73.71 %
  80              (u16)((u32)TIMER2_FEQ * 6375 / 10000), // 63.75 %
  81              (u16)((u32)TIMER2_FEQ * 5379 / 10000), // 53.79 %
  82              (u16)((u32)TIMER2_FEQ * 4383 / 10000), // 43.83 %
  83              (u16)((u32)TIMER2_FEQ * 3387 / 10000), // 33.87 %
  84              (u16)((u32)TIMER2_FEQ * 2391 / 10000), // 23.91 %
  85              (u16)((u32)TIMER2_FEQ * 1395 / 10000), // 13.95 %
  86              (u16)((u32)TIMER2_FEQ * 478 / 10000),  // 4.78 %
  87          };
  88          
  89          // 短按增加灯光亮度，对应各个挡位亮度的占空比值
  90          const u16 light_pwm_add_table[9] = {
  91              (u16)((u32)TIMER2_FEQ * 478 / 10000),  // 4.78 %
  92              (u16)((u32)TIMER2_FEQ * 1474 / 10000), // 14.74 %
  93              (u16)((u32)TIMER2_FEQ * 2470 / 10000), // 24.70 %
  94              (u16)((u32)TIMER2_FEQ * 3466 / 10000), // 34.66 %
  95              (u16)((u32)TIMER2_FEQ * 4462 / 10000), // 44.62 %
  96              (u16)((u32)TIMER2_FEQ * 5458 / 10000), // 54.58 %
  97              (u16)((u32)TIMER2_FEQ * 6554 / 10000), // 65.54 %
  98              (u16)((u32)TIMER2_FEQ * 7450 / 10000), // 74.50 %
  99              (u16)((u32)TIMER2_FEQ * 8367 / 10000), // 83.67 %
 100          };
 101          
 102          const u16 light_pwm_duty_init_val_table[5] = {
 103              (u16)((u32)TIMER2_FEQ * 8367 / 10000), // 83.67 %
 104              (u16)((u32)TIMER2_FEQ * 7411 / 10000), // 74.11 %
 105              (u16)((u32)TIMER2_FEQ * 6455 / 10000), // 64.55 %
 106              (u16)((u32)TIMER2_FEQ * 5698 / 10000), // 56.98 %
 107              (u16)((u32)TIMER2_FEQ * 4980 / 10000), // 49.80 %
 108          };
 109          
 110          void led_pin_config(void)
 111          {
 112   1          P1_MD0 &= ~GPIO_P11_MODE_SEL(0x03);
 113   1          P1_MD0 |= GPIO_P11_MODE_SEL(0x01);
 114   1          FOUT_S11 = GPIO_FOUT_AF_FUNC;
C51 COMPILER V9.60.7.0   MAIN                                                              07/18/2025 17:47:46 PAGE 3   

 115   1          P11 = 0; // 如果不给初始值，上电之后，指示灯会闪一下
 116   1      
 117   1          P1_MD0 &= ~GPIO_P12_MODE_SEL(0x03);
 118   1          P1_MD0 |= GPIO_P12_MODE_SEL(0x01);
 119   1          FOUT_S12 = GPIO_FOUT_AF_FUNC;
 120   1          P12 = 0;
 121   1      
 122   1          P1_MD0 &= ~GPIO_P13_MODE_SEL(0x03);
 123   1          P1_MD0 |= GPIO_P13_MODE_SEL(0x01);
 124   1          FOUT_S13 = GPIO_FOUT_AF_FUNC;
 125   1          P13 = 0;
 126   1      
 127   1          P1_MD1 &= ~GPIO_P14_MODE_SEL(0x03);
 128   1          P1_MD1 |= GPIO_P14_MODE_SEL(0x01);
 129   1          FOUT_S14 = GPIO_FOUT_AF_FUNC;
 130   1          P14 = 0;
 131   1      
 132   1          P1_MD1 &= ~GPIO_P15_MODE_SEL(0x03);
 133   1          P1_MD1 |= GPIO_P15_MODE_SEL(0x01);
 134   1          FOUT_S15 = GPIO_FOUT_AF_FUNC;
 135   1          P15 = 0;
 136   1      }
 137          
 138          /*
 139              变量、参数，初始化
 140          
 141              如果是第一次上电，需要读出存放的数据
 142          */
 143          void param_init(void)
 144          {
 145   1          light_ctl_phase_in_rate_1 = 1;
 146   1      
 147   1          cur_initial_discharge_gear = 5; // 初始放电挡位（需要记忆）
 148   1          cur_discharge_rate = 2;         // 初始放电速率（需要记忆）
 149   1      }
 150          
 151          /**
 152           * @brief  Main program.
 153           * @param  None
 154           * @retval None
 155           */
 156          void main(void)
 157          {
 158   1          // 看门狗默认打开, 复位时间2s
 159   1          WDT_KEY = WDT_KEY_VAL(0xDD); //  关闭看门狗 (如需配置看门狗请查看“WDT\WDT_Reset”示例)
 160   1      
 161   1          system_init();
 162   1      
 163   1          // 关闭HCK和HDA的调试功能
 164   1          WDT_KEY = 0x55;  // 解除写保护
 165   1          IO_MAP &= ~0x01; // 清除这个寄存器的值，实现关闭HCK和HDA引脚的调试功能（解除映射）
 166   1          WDT_KEY = 0xBB;  // 写一个无效的数据，触发写保护
 167   1      
 168   1          uart0_config();
 169   1          my_debug_led_config();
 170   1      
 171   1          timer0_config();
 172   1          timer1_pwm_config(); // 控制充电的PWM
 173   1          timer1_pwm_disable();
 174   1          timer2_pwm_config(); // 控制灯光的pwm
 175   1          timer2_pwm_disable();
 176   1      
C51 COMPILER V9.60.7.0   MAIN                                                              07/18/2025 17:47:46 PAGE 4   

 177   1          // timer1_set_pwm_high_feq();
 178   1          // TODO: 7361不用加这个引脚配置:
 179   1          led_pin_config();
 180   1      
 181   1          // 红外接收引脚：
 182   1          P2_MD0 &= ~(GPIO_P23_MODE_SEL(0x03)); // 输入模式
 183   1          P2_PU |= GPIO_P23_PULL_UP(0x01);      // 上拉
 184   1      
 185   1          adc_config();
 186   1      
 187   1          printf("sys reset\n"); // 打印至少占用1012字节空间
 188   1      
 189   1          // TODO:
 190   1          // 上电后，需要先点亮红色指示灯，再变为电池电量指示模式
 191   1          // LED_1_ON();
 192   1          // delay_ms(1000);
 193   1      
 194   1          // cur_led_mode = CUR_LED_MODE_INITIAL_DISCHARGE_GEAR;
 195   1      
 196   1      #if 0
                  cur_led_mode = CUR_LED_MODE_BAT_INDICATOR; // 电池电量指示模式
                  cur_initial_discharge_gear = 5;
                  cur_discharge_rate = 3;
              #endif
 201   1      
 202   1          // cur_led_mode = CUR_LED_MODE_CHARGING;
 203   1      
 204   1          // bat_adc_val = 2000;
 205   1          // led_status_refresh();
 206   1          // cur_led_mode = CUR_LED_MODE_BAT_INDICATOR;
 207   1      
 208   1          param_init();
 209   1      
 210   1          led_mode_alter(CUR_LED_MODE_BAT_INDICATOR); // 电池电量指示模式
 211   1          light_init();
 212   1      
 213   1          // light_ctl_blink_times = 3;
 214   1          // flag_is_ctl_light_blink = 1;
 215   1      
 216   1          while (1)
 217   1          {
 218   2      
 219   2      #if 1
 220   2      
 221   2              charge_handle();
 222   2              ir_handle(); // 函数内部会判断是否在充电，如果在充电则退出
 223   2      
 224   2              // 如果当前正在充电，但是指示灯没有切换到充电指示模式，则切换：
 225   2              if (CUR_CHARGE_PHASE_NONE != cur_charge_phase)
 226   2              {
 227   3                  if (cur_led_mode != CUR_LED_MODE_CHARGING &&
 228   3                      cur_led_mode != CUR_LED_MODE_OFF)
 229   3                  {
 230   4                      led_mode_alter(CUR_LED_MODE_CHARGING);
 231   4                  }
 232   3      
 233   3                  // 需要关闭主灯光
 234   3                  LIGHT_OFF();
 235   3              } // if (CUR_CHARGE_PHASE_NONE != cur_charge_phase)
 236   2              else // CUR_CHARGE_PHASE_NONE == cur_charge_phase
 237   2              {
 238   3                  /*
C51 COMPILER V9.60.7.0   MAIN                                                              07/18/2025 17:47:46 PAGE 5   

 239   3                      如果当前没有在充电，并且指示灯处于充电指示模式，
 240   3                      切换回电池电量指示模式
 241   3      
 242   3                      测试时发现从充电到断开充电，led指示灯还在闪烁，需要加上这补丁
 243   3                  */
 244   3                  if (cur_led_mode == CUR_LED_MODE_CHARGING)
 245   3                  {
 246   4                      led_mode_alter(CUR_LED_MODE_BAT_INDICATOR);
 247   4                      // 需要打开主灯光
 248   4                      LIGHT_ON();
 249   4                  }
 250   3              }
 251   2      
 252   2              // TODO：未起到效果
 253   2              // if (cur_led_mode == CUR_LED_MODE_OFF)
 254   2              // {
 255   2              //     if (cur_light_pwm_duty_val > 0)
 256   2              //     {
 257   2              //         LIGHT_OFF();
 258   2              //     }
 259   2              // }
 260   2      
 261   2              adc_update_bat_adc_val();
 262   2              led_handle();
 263   2              light_handle();
 264   2      
 265   2      #if 1
 266   2              // 每隔一段时间，打印调试信息：
 267   2              {
 268   3                  static u8 cnt = 0;
 269   3                  cnt++;
 270   3                  if (cnt >= 200)
 271   3                  {
 272   4                      cnt = 0;
 273   4                      // printf("bat_adc_val %u\n", bat_adc_val);
 274   4                      // printf("cur_light_pwm_duty_val %u\n", cur_light_pwm_duty_val);
 275   4                      // printf("cur light pwm percent %bu %%\n", (u8)((u32)cur_light_pwm_duty_val * 100 / TIMER
             -2_FEQ));
 276   4      
 277   4                      switch (cur_led_mode)
 278   4                      {
 279   5                      case CUR_LED_MODE_OFF:
 280   5                          printf("led mode off\n");
 281   5                          break;
 282   5      
 283   5                      case CUR_LED_MODE_BAT_INDICATOR:
 284   5                          printf("led mode bat indicator\n");
 285   5                          break;
 286   5                      
 287   5                      case CUR_LED_MODE_CHARGING:
 288   5                          printf("led mode charging\n");
 289   5                          break;
 290   5                      
 291   5                      // case CUR_LED_MODE_DISCHARGE_RATE:
 292   5                      //     printf("led mode discharge rate\n");
 293   5                      //     break;
 294   5                      
 295   5                      // case CUR_LED_MODE_INITIAL_DISCHARGE_GEAR:
 296   5                      //     printf("led mode initial discharge gear\n");
 297   5                      //     break;
 298   5                      
 299   5                      case CUR_LED_MODE_SETTING:
C51 COMPILER V9.60.7.0   MAIN                                                              07/18/2025 17:47:46 PAGE 6   

 300   5                          printf("led mode setting\n");
 301   5                          break;
 302   5                      
 303   5                      default:
 304   5                          break;
 305   5                      }
 306   4                  }
 307   3              }
 308   2      #endif
 309   2      
 310   2              if (CUR_CHARGE_PHASE_NONE == cur_charge_phase)
 311   2              {
 312   3                  my_debug_led_2_off();
 313   3                  my_debug_led_3_off();
 314   3                  my_debug_led_4_off();
 315   3      
 316   3                  my_debug_led_1_on();
 317   3              }
 318   2              else if (CUR_CHARGE_PHASE_NORMAL_CHARGE == cur_charge_phase)
 319   2              {
 320   3                  my_debug_led_1_off();
 321   3                  my_debug_led_3_off();
 322   3                  my_debug_led_4_off();
 323   3      
 324   3                  my_debug_led_2_on();
 325   3              }
 326   2              else if (CUR_CHARGE_PHASE_TRICKLE_CHARGE_WHEN_APPROACH_FULLY_CHARGE == cur_charge_phase)
 327   2              {
 328   3                  my_debug_led_1_off();
 329   3                  my_debug_led_2_off();
 330   3                  my_debug_led_4_off();
 331   3      
 332   3                  my_debug_led_3_on();
 333   3              }
 334   2              else if (CUR_CHARGE_PHASE_FULLY_CHARGE == cur_charge_phase)
 335   2              {
 336   3                  my_debug_led_1_off();
 337   3                  my_debug_led_2_off();
 338   3                  my_debug_led_3_off();
 339   3      
 340   3                  my_debug_led_4_on();
 341   3              }
 342   2      
 343   2      #if 0 // 缓慢调节驱动灯光的pwm占空比（还未调试完成）
              
                      {
                          // static u8 cnt =0;
              
                          // 暂定每100us调节一次
              
                          if (cur_light_pwm_duty_val > expect_light_pwm_duty_val)
                          {
                              cur_light_pwm_duty_val--;
                          }
                          else if (cur_light_pwm_duty_val < expect_light_pwm_duty_val)
                          {
                              cur_light_pwm_duty_val++;
                          }
              
                          SET_LIGHT_PWM_DUTY(cur_light_pwm_duty_val);
                          // timer2_set_pwm_duty(cur_light_pwm_duty_val);
                      }
C51 COMPILER V9.60.7.0   MAIN                                                              07/18/2025 17:47:46 PAGE 7   

              
              #endif // 缓慢调节驱动灯光的pwm占空比（还未调试完成）
 364   2      
 365   2      #endif
 366   2          }
 367   1      }
 368          
 369          /**
 370           * @}
 371           */
 372          
 373          /*************************** (C) COPYRIGHT 2022 HUGE-IC ***** END OF FILE *****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    380    ----
   CONSTANT SIZE    =     86    ----
   XDATA SIZE       =     80    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
