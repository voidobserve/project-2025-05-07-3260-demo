C51 COMPILER V9.60.7.0   MAIN                                                              07/19/2025 15:17:19 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Release\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) INCDI
                    -R(..\..\Libraries\Include;..\..\User;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\main.lst) O
                    -BJECT(.\Release\Objects\main.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    main.c
   4           * @author  HUGE-IC Application Team
   5           * @version V1.0.0
   6           * @date    01-05-2021
   7           * @brief   Main program body
   8           ******************************************************************************
   9           * @attention
  10           *
  11           * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  12           *
  13           * 版权说明后续补上
  14           *
  15           ******************************************************************************
  16           */
  17          
  18          /* Includes ------------------------------------------------------------------*/
  19          #include "include.h"
  20          #include <stdio.h>
  21          
  22          #include "user_config.h"
  23          
  24          volatile bit_flag flag1 = {0};
  25          volatile bit_flag flag2 = {0};
  26          
  27          // =================================================================
  28          // 红外接收相关变量                                                //
  29          // =================================================================
  30          volatile u8 ir_data = 0;
  31          volatile bit flag_is_recv_ir_repeat_code = 0;
  32          volatile bit flag_is_recved_data = 0;
  33          
  34          // =================================================================
  35          // 充电控制相关变量                                                 //
  36          // =================================================================
  37          volatile u16 bat_adc_val;                                           // 电池电压检测脚采集到的ad值
  38          volatile u16 charging_adc_val;                                      // 充电电压检测脚采集的ad值
  39          volatile u16 current_adc_val;                                       // 充电电流检测脚采集的ad值
  40          volatile u8 flag_is_charging_adjust_time_come = 0;                  // 调节充电的时间到来
  41          volatile u8 cur_charging_pwm_status = CUR_CHARGING_PWM_STATUS_NONE; // 控制充电的PWM状态
  42          volatile u8 cur_charge_phase = CUR_CHARGE_PHASE_NONE;               // 记录当前充电阶段
  43          
  44          // =================================================================
  45          // 指示灯控制相关变量                                               //
  46          // =================================================================
  47          volatile u8 cur_initial_discharge_gear; // 初始放电挡位（需要记忆）
  48          volatile u8 cur_discharge_rate;         // 初始放电速率（需要记忆）
  49          volatile u8 cur_led_mode;               // 当前的LED模式
  50          // volatile u8 last_led_mode; // 上次的led模式
  51          volatile u8 cur_led_gear;             // 当前led挡位
  52          volatile u8 last_led_gear;            // 上次led挡位（只能在刚上电时清零赋初始值）
  53          volatile u8 cur_led_gear_in_charging; // 充电指示，对应的挡位
C51 COMPILER V9.60.7.0   MAIN                                                              07/19/2025 15:17:19 PAGE 2   

  54          
  55          volatile bit flag_is_in_setting_mode = 0;              // 是否处于设置模式
  56          volatile u8 flag_led_setting_mode_exit_times_come = 0; // 标志位，led退出设置模式的时间到来
  57          volatile u16 led_setting_mode_exit_times_cnt = 0;      // 特殊的LED模式，退出时间计数
  58          
  59          volatile bit flag_is_in_struction_mode = 0;               // 是否处于指示模式
  60          volatile bit flag_led_struction_mode_exit_times_come = 0; // 退出指示灯指示模式的时间到来
  61          volatile u16 led_struction_mode_exit_times_cnt = 0;       // 退出指示灯指示模式时间计数
  62          
  63          // 标志位，是否要回到 led_off 模式
  64          volatile bit flag_is_led_off_enable = 0;
  65          
  66          // =================================================================
  67          // 主灯光控制相关变量                                               //
  68          // =================================================================
  69          volatile u32 light_adjust_time_cnt = 0;    // 调节灯光的时间计数，暂定为每1s加一
  70          volatile u8 light_ctl_phase_in_rate_1 = 1; // 在放电速率M1时，使用到的变量，在计算公式里面用作系数，每次唤
             -醒时需要初始化为1
  71          
  72          // TODO：3260使用16位寄存器，7361使用8位寄存器，要进行适配修改
  73          volatile u16 cur_light_pwm_duty_val = 0; // 当前灯光对应的占空比值
  74          // volatile u16 expect_light_pwm_duty_val = 0;                  // 期望调节到的、灯光对应的占空比值
  75          volatile u8 flag_is_light_adjust_time_come = 0;              // 调节灯光的时间到来，目前为1s
  76          volatile u8 flag_is_light_pwm_duty_val_adjust_time_come = 0; // 灯光占空比值调节时间到来
  77          
  78          volatile u8 flag_is_ctl_light_blink = 0; // 是否控制主灯光闪烁
  79          volatile u8 light_ctl_blink_times = 0;   // 要控制主灯光闪烁的次数
  80          /*
  81              是否要在设置模式期间关闭主灯光
  82          
  83              如果已经关灯，在设置模式期间，主灯闪烁完成后，直接关灯
  84          */
  85          volatile bit flag_allow_light_in_setting_mode = 0;
  86          
  87          // 是否要缓慢调节主灯光的占空比
  88          volatile bit flag_is_adjust_light_slowly = 0;
  89          volatile u16 expect_light_pwm_duty_val = 0; // 期望缓慢调节到的、主灯光对应的占空比值
  90          
  91          // 是否开启了定时关机功能：
  92          volatile bit flag_is_auto_shutdown_enable = 0;
  93          volatile u32 light_auto_shutdown_time_cnt = 0; // 定时关机功能的定时器计数，单位：ms
  94          volatile bit flag_is_auto_shutdown_times_come = 0; // 定时关机的时间到来
  95          
  96          // 短按减小灯光亮度，对应各个挡位亮度的占空比值
  97          const u16 light_pwm_sub_table[9] = {
  98              (u16)((u32)TIMER2_FEQ * 8367 / 10000), // 83.67 %
  99              (u16)((u32)TIMER2_FEQ * 7371 / 10000), // 73.71 %
 100              (u16)((u32)TIMER2_FEQ * 6375 / 10000), // 63.75 %
 101              (u16)((u32)TIMER2_FEQ * 5379 / 10000), // 53.79 %
 102              (u16)((u32)TIMER2_FEQ * 4383 / 10000), // 43.83 %
 103              (u16)((u32)TIMER2_FEQ * 3387 / 10000), // 33.87 %
 104              (u16)((u32)TIMER2_FEQ * 2391 / 10000), // 23.91 %
 105              (u16)((u32)TIMER2_FEQ * 1395 / 10000), // 13.95 %
 106              (u16)((u32)TIMER2_FEQ * 478 / 10000),  // 4.78 %
 107          };
 108          
 109          // 短按增加灯光亮度，对应各个挡位亮度的占空比值
 110          const u16 light_pwm_add_table[9] = {
 111              (u16)((u32)TIMER2_FEQ * 478 / 10000),  // 4.78 %
 112              (u16)((u32)TIMER2_FEQ * 1474 / 10000), // 14.74 %
 113              (u16)((u32)TIMER2_FEQ * 2470 / 10000), // 24.70 %
 114              (u16)((u32)TIMER2_FEQ * 3466 / 10000), // 34.66 %
C51 COMPILER V9.60.7.0   MAIN                                                              07/19/2025 15:17:19 PAGE 3   

 115              (u16)((u32)TIMER2_FEQ * 4462 / 10000), // 44.62 %
 116              (u16)((u32)TIMER2_FEQ * 5458 / 10000), // 54.58 %
 117              (u16)((u32)TIMER2_FEQ * 6554 / 10000), // 65.54 %
 118              (u16)((u32)TIMER2_FEQ * 7450 / 10000), // 74.50 %
 119              (u16)((u32)TIMER2_FEQ * 8367 / 10000), // 83.67 %
 120          };
 121          
 122          const u16 light_pwm_duty_init_val_table[5] = {
 123              (u16)((u32)TIMER2_FEQ * 8367 / 10000), // 83.67 %
 124              (u16)((u32)TIMER2_FEQ * 7411 / 10000), // 74.11 %
 125              (u16)((u32)TIMER2_FEQ * 6455 / 10000), // 64.55 %
 126              (u16)((u32)TIMER2_FEQ * 5698 / 10000), // 56.98 %
 127              (u16)((u32)TIMER2_FEQ * 4980 / 10000), // 49.80 %
 128          };
 129          
 130          void led_pin_config(void)
 131          {
 132   1          P1_MD0 &= ~GPIO_P11_MODE_SEL(0x03);
 133   1          P1_MD0 |= GPIO_P11_MODE_SEL(0x01);
 134   1          FOUT_S11 = GPIO_FOUT_AF_FUNC;
 135   1          P11 = 0; // 如果不给初始值，上电之后，指示灯会闪一下
 136   1      
 137   1          P1_MD0 &= ~GPIO_P12_MODE_SEL(0x03);
 138   1          P1_MD0 |= GPIO_P12_MODE_SEL(0x01);
 139   1          FOUT_S12 = GPIO_FOUT_AF_FUNC;
 140   1          P12 = 0;
 141   1      
 142   1          P1_MD0 &= ~GPIO_P13_MODE_SEL(0x03);
 143   1          P1_MD0 |= GPIO_P13_MODE_SEL(0x01);
 144   1          FOUT_S13 = GPIO_FOUT_AF_FUNC;
 145   1          P13 = 0;
 146   1      
 147   1          P1_MD1 &= ~GPIO_P14_MODE_SEL(0x03);
 148   1          P1_MD1 |= GPIO_P14_MODE_SEL(0x01);
 149   1          FOUT_S14 = GPIO_FOUT_AF_FUNC;
 150   1          P14 = 0;
 151   1      
 152   1          P1_MD1 &= ~GPIO_P15_MODE_SEL(0x03);
 153   1          P1_MD1 |= GPIO_P15_MODE_SEL(0x01);
 154   1          FOUT_S15 = GPIO_FOUT_AF_FUNC;
 155   1          P15 = 0;
 156   1      }
 157          
 158          /*
 159              变量、参数，初始化
 160          
 161              如果是第一次上电，需要读出存放的数据
 162          */
 163          void param_init(void)
 164          {
 165   1          light_ctl_phase_in_rate_1 = 1;
 166   1      
 167   1          cur_initial_discharge_gear = 5; // 初始放电挡位（需要记忆）
 168   1          cur_discharge_rate = 2;         // 初始放电速率（需要记忆）
 169   1      }
 170          
 171          /**
 172           * @brief  Main program.
 173           * @param  None
 174           * @retval None
 175           */
 176          void main(void)
C51 COMPILER V9.60.7.0   MAIN                                                              07/19/2025 15:17:19 PAGE 4   

 177          {
 178   1          // 看门狗默认打开, 复位时间2s
 179   1          WDT_KEY = WDT_KEY_VAL(0xDD); //  关闭看门狗 (如需配置看门狗请查看“WDT\WDT_Reset”示例)
 180   1      
 181   1          system_init();
 182   1      
 183   1          // 关闭HCK和HDA的调试功能
 184   1          WDT_KEY = 0x55;  // 解除写保护
 185   1          IO_MAP &= ~0x01; // 清除这个寄存器的值，实现关闭HCK和HDA引脚的调试功能（解除映射）
 186   1          WDT_KEY = 0xBB;  // 写一个无效的数据，触发写保护
 187   1      
 188   1          uart0_config();
 189   1          my_debug_led_config();
 190   1      
 191   1          timer0_config();
 192   1          timer1_pwm_config(); // 控制充电的PWM
 193   1          timer1_pwm_disable();
 194   1          timer2_pwm_config(); // 控制灯光的pwm
 195   1          timer2_pwm_disable();
 196   1      
 197   1          // timer1_set_pwm_high_feq();
 198   1          // TODO: 7361不用加这个引脚配置:
 199   1          led_pin_config();
 200   1      
 201   1          // 红外接收引脚：
 202   1          P2_MD0 &= ~(GPIO_P23_MODE_SEL(0x03)); // 输入模式
 203   1          P2_PU |= GPIO_P23_PULL_UP(0x01);      // 上拉
 204   1      
 205   1          adc_config();
 206   1      
 207   1          printf("sys reset\n"); // 打印至少占用1012字节空间
 208   1      
 209   1          // TODO:
 210   1          // 上电后，需要先点亮红色指示灯，再变为电池电量指示模式
 211   1          // LED_1_ON();
 212   1          // delay_ms(1000);
 213   1      
 214   1          // cur_led_mode = CUR_LED_MODE_INITIAL_DISCHARGE_GEAR;
 215   1      
 216   1      #if 0
                  cur_led_mode = CUR_LED_MODE_BAT_INDICATOR; // 电池电量指示模式
                  cur_initial_discharge_gear = 5;
                  cur_discharge_rate = 3;
              #endif
 221   1      
 222   1          // cur_led_mode = CUR_LED_MODE_CHARGING;
 223   1      
 224   1          // bat_adc_val = 2000;
 225   1          // led_status_refresh();
 226   1          // cur_led_mode = CUR_LED_MODE_BAT_INDICATOR;
 227   1      
 228   1          param_init();
 229   1      
 230   1          light_init();
 231   1          led_init();
 232   1          led_mode_alter(CUR_LED_MODE_BAT_INDICATOR); // 电池电量指示模式
 233   1      
 234   1          // light_ctl_blink_times = 3;
 235   1          // flag_is_ctl_light_blink = 1;
 236   1      
 237   1          while (1)
 238   1          {
C51 COMPILER V9.60.7.0   MAIN                                                              07/19/2025 15:17:19 PAGE 5   

 239   2      
 240   2      #if 1
 241   2      
 242   2              charge_handle();
 243   2              ir_handle(); // 函数内部会判断是否在充电，如果在充电则退出
 244   2      
 245   2              // 如果当前正在充电，但是指示灯没有切换到充电指示模式，则切换：
 246   2              if (CUR_CHARGE_PHASE_NONE != cur_charge_phase)
 247   2              {
 248   3                  if (cur_led_mode != CUR_LED_MODE_CHARGING &&
 249   3                      cur_led_mode != CUR_LED_MODE_OFF)
 250   3                  {
 251   4                      led_mode_alter(CUR_LED_MODE_CHARGING);
 252   4                  }
 253   3      
 254   3                  // 需要关闭主灯光
 255   3                  LIGHT_OFF();
 256   3              } // if (CUR_CHARGE_PHASE_NONE != cur_charge_phase)
 257   2              else // CUR_CHARGE_PHASE_NONE == cur_charge_phase
 258   2              {
 259   3                  /*
 260   3                      如果当前没有在充电，并且指示灯处于充电指示模式，
 261   3                      切换回电池电量指示模式
 262   3      
 263   3                      测试时发现从充电到断开充电，led指示灯还在闪烁，需要加上这补丁
 264   3                  */
 265   3                  if (cur_led_mode == CUR_LED_MODE_CHARGING)
 266   3                  {
 267   4                      led_mode_alter(CUR_LED_MODE_BAT_INDICATOR);
 268   4                      // 需要打开主灯光
 269   4                      LIGHT_ON();
 270   4                  }
 271   3              }
 272   2              
 273   2              // 如果定时关机的时间到来
 274   2              if (flag_is_auto_shutdown_times_come)
 275   2              {
 276   3                  flag_is_auto_shutdown_times_come = 0;
 277   3                  led_status_clear();
 278   3                  cur_led_mode = CUR_LED_MODE_OFF;
 279   3                  cur_light_pwm_duty_val = 0;
 280   3                  LIGHT_OFF();
 281   3              }
 282   2      
 283   2      
 284   2              adc_update_bat_adc_val();
 285   2              led_handle();
 286   2              light_handle();
 287   2      
 288   2      #if 0 // 每隔一段时间，打印调试信息：
              
                      {
                          static u8 cnt = 0;
                          cnt++;
                          if (cnt >= 200)
                          {
                              cnt = 0;
                              // printf("bat_adc_val %u\n", bat_adc_val);
                              // printf("cur_light_pwm_duty_val %u\n", cur_light_pwm_duty_val);
                              // printf("cur light pwm percent %bu %%\n", (u8)((u32)cur_light_pwm_duty_val * 100 / TIMER
             -2_FEQ));
              
C51 COMPILER V9.60.7.0   MAIN                                                              07/19/2025 15:17:19 PAGE 6   

                              switch (cur_led_mode)
                              {
                              case CUR_LED_MODE_OFF:
                                  printf("led mode off\n");
                                  break;
              
                              case CUR_LED_MODE_BAT_INDICATOR:
                                  printf("led mode bat indicator\n");
                                  break;
              
                              case CUR_LED_MODE_CHARGING:
                                  printf("led mode charging\n");
                                  break;
              
                              case CUR_LED_MODE_SETTING:
                                  printf("led mode setting\n");
                                  break;
              
                              case CUR_LED_MODE_INITIAL_DISCHARGE_GEAR_IN_SETTING_MODE:
                                  printf("led mode initial discharge gear in setting mode\n");
                                  break;
              
                              case CUR_LED_MODE_DISCHARGE_RATE_IN_SETTING_MODE:
                                  printf("led mode discharge rate in setting mode\n");
                                  break;
              
                              case CUR_LED_MODE_BAT_INDICATIOR_IN_INSTRUCTION_MODE:
                                  printf("led mode bat indicator in instruction mode\n");
                                  break;
              
                              case CUR_LED_MODE_INITIAL_DISCHARGE_GEAR_IN_INSTRUCTION_MODE:
                                  printf("led mode initial discharge gear in instruction mode\n");
                                  break;
              
                              case CUR_LED_MODE_DISCHARGE_RATE_IN_INSTRUCTION_MODE:
                                  printf("led mode discharge rate in instruction mode\n");
                                  break;
              
                              default:
                                  break;
                              }
                          }
                      }
              #endif // 每隔一段时间，打印调试信息
 344   2      
 345   2      #if 1 // demo板使用到的调试指示灯
 346   2              if (CUR_CHARGE_PHASE_NONE == cur_charge_phase)
 347   2              {
 348   3                  my_debug_led_2_off();
 349   3                  my_debug_led_3_off();
 350   3                  my_debug_led_4_off();
 351   3      
 352   3                  my_debug_led_1_on();
 353   3              }
 354   2              else if (CUR_CHARGE_PHASE_NORMAL_CHARGE == cur_charge_phase)
 355   2              {
 356   3                  my_debug_led_1_off();
 357   3                  my_debug_led_3_off();
 358   3                  my_debug_led_4_off();
 359   3      
 360   3                  my_debug_led_2_on();
 361   3              }
C51 COMPILER V9.60.7.0   MAIN                                                              07/19/2025 15:17:19 PAGE 7   

 362   2              else if (CUR_CHARGE_PHASE_TRICKLE_CHARGE_WHEN_APPROACH_FULLY_CHARGE == cur_charge_phase)
 363   2              {
 364   3                  my_debug_led_1_off();
 365   3                  my_debug_led_2_off();
 366   3                  my_debug_led_4_off();
 367   3      
 368   3                  my_debug_led_3_on();
 369   3              }
 370   2              else if (CUR_CHARGE_PHASE_FULLY_CHARGE == cur_charge_phase)
 371   2              {
 372   3                  my_debug_led_1_off();
 373   3                  my_debug_led_2_off();
 374   3                  my_debug_led_3_off();
 375   3      
 376   3                  my_debug_led_4_on();
 377   3              }
 378   2      #endif // demo板使用到的调试指示灯
 379   2      
 380   2      #if 0 // 缓慢调节驱动灯光的pwm占空比（还未调试完成）
              
                      {
                          // static u8 cnt =0;
              
                          // 暂定每100us调节一次
              
                          if (cur_light_pwm_duty_val > expect_light_pwm_duty_val)
                          {
                              cur_light_pwm_duty_val--;
                          }
                          else if (cur_light_pwm_duty_val < expect_light_pwm_duty_val)
                          {
                              cur_light_pwm_duty_val++;
                          }
              
                          SET_LIGHT_PWM_DUTY(cur_light_pwm_duty_val);
                          // timer2_set_pwm_duty(cur_light_pwm_duty_val);
                      }
              
              #endif // 缓慢调节驱动灯光的pwm占空比（还未调试完成）
 401   2      
 402   2      #endif
 403   2          }
 404   1      }
 405          
 406          /**
 407           * @}
 408           */
 409          
 410          /*************************** (C) COPYRIGHT 2022 HUGE-IC ***** END OF FILE *****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    339    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =     86    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     10    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
