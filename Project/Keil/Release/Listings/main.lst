C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2025 17:45:29 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Release\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) INCDI
                    -R(..\..\Libraries\Include;..\..\User;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\main.lst) O
                    -BJECT(.\Release\Objects\main.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    main.c
   4           * @author  HUGE-IC Application Team
   5           * @version V1.0.0
   6           * @date    01-05-2021
   7           * @brief   Main program body
   8           ******************************************************************************
   9           * @attention
  10           *
  11           * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  12           *
  13           * 版权说明后续补上
  14           *
  15           ******************************************************************************
  16           */
  17          
  18          /* Includes ------------------------------------------------------------------*/
  19          #include "include.h"
  20          #include <stdio.h>
  21          
  22          #include "user_config.h"
  23          
  24          volatile bit_flag flag1 = {0};
  25          volatile bit_flag flag2 = {0};
  26          
  27          volatile u8 cur_light_pwm_duty_val = 0;    // 当前灯光对应的占空比值
  28          volatile u8 expect_light_pwm_duty_val = 0; // 期望调节到的、灯光对应的占空比值
  29          
  30          volatile u16 bat_adc_val;
  31          volatile u16 charging_adc_val; // 检测到充电电压的ad值
  32          volatile u16 current_adc_val;  // 检测到充电电流对应的电压值
  33          
  34          volatile u8 flag_is_light_adjust_time_come = 0; // 调节灯光的时间到来，目前为1s
  35          
  36          volatile u16 light_adjust_time_cnt = 0;
  37          
  38          volatile u8 flag_is_charging_adjust_time_come = 0; // 调节充电的时间到来
  39          
  40          //
  41          void led_pin_config(void)
  42          {
  43   1          P1_MD0 &= ~GPIO_P11_MODE_SEL(0x03);
  44   1          P1_MD0 |= GPIO_P11_MODE_SEL(0x01);
  45   1          FOUT_S11 = GPIO_FOUT_AF_FUNC;
  46   1          P11 = 0; // 如果不给初始值，上电之后，指示灯会闪一下
  47   1      
  48   1          P1_MD0 &= ~GPIO_P12_MODE_SEL(0x03);
  49   1          P1_MD0 |= GPIO_P12_MODE_SEL(0x01);
  50   1          FOUT_S12 = GPIO_FOUT_AF_FUNC;
  51   1          P12 = 0;
  52   1      
  53   1          P1_MD0 &= ~GPIO_P13_MODE_SEL(0x03);
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2025 17:45:29 PAGE 2   

  54   1          P1_MD0 |= GPIO_P13_MODE_SEL(0x01);
  55   1          FOUT_S13 = GPIO_FOUT_AF_FUNC;
  56   1          P13 = 0;
  57   1      
  58   1          P1_MD1 &= ~GPIO_P14_MODE_SEL(0x03);
  59   1          P1_MD1 |= GPIO_P14_MODE_SEL(0x01);
  60   1          FOUT_S14 = GPIO_FOUT_AF_FUNC;
  61   1          P14 = 0;
  62   1      
  63   1          P1_MD1 &= ~GPIO_P15_MODE_SEL(0x03);
  64   1          P1_MD1 |= GPIO_P15_MODE_SEL(0x01);
  65   1          FOUT_S15 = GPIO_FOUT_AF_FUNC;
  66   1          P15 = 0;
  67   1      }
  68          
  69          // // 绝对值函数
  70          // float my_fabs(float x) {
  71          //     return (x < 0) ? -x : x;
  72          // }
  73          
  74          // 泰勒展开近似 ln(x)，收敛范围：x > 0.1
  75          float my_ln(float x)
  76          {
  77   1          u8 i;
  78   1          float t = (x - 1) / (x + 1);
  79   1          float sum = 0.0f;
  80   1          float term = t;
  81   1      
  82   1          for (i = 0; i < 50; i++)
  83   1          {
  84   2              sum += term / (2 * i + 1);
  85   2              term *= t * t;
  86   2          }
  87   1      
  88   1          return 2 * sum;
  89   1      }
  90          
  91          // 泰勒展开近似 exp(x)
  92          float my_exp(float x)
  93          {
  94   1          u8 i;
  95   1          float sum = 1.0f;
  96   1          float term = 1.0f;
  97   1      
  98   1          for (i = 1; i < 20; i++)
  99   1          {
 100   2              term *= x / i;
 101   2              sum += term;
 102   2          }
 103   1      
 104   1          return sum;
 105   1      }
 106          
 107          // 幂函数：x^y = e^(y * ln(x))
 108          float my_pow(float base, float exponent)
 109          {
 110   1          if (base <= 0.0f)
 111   1          {
 112   2              return 0.0f; // 不支持负底数或0的负次幂
 113   2          }
 114   1          if (exponent == 0.0f)
 115   1              return 1.0f;
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2025 17:45:29 PAGE 3   

 116   1          if (base == 1.0f)
 117   1              return 1.0f;
 118   1      
 119   1          return my_exp(exponent * my_ln(base));
 120   1      }
 121          
 122          // 返回值：占空比，单位：百分之一（例如 75 表示 75%）
 123          u8 calculate_duty(u32 voltage_mV)
 124          {
 125   1          // y = 538 / (x ^ 1.178)
 126   1          // const float A = 538.0f;
 127   1          // const float n = 1.178f;
 128   1      
 129   1          // y = 680 / (x ^ 1.32)
 130   1          const float A = 680.0F;
 131   1          const float n = 1.32F;
 132   1      
 133   1          // y = k / x
 134   1          // const float A = 376.26f;
 135   1          // const float A = 395.2f;
 136   1          // const float A = 348.32f;
 137   1          // const float A = 288.0F;
 138   1          // const float n = 1.0f;
 139   1          float result;
 140   1      
 141   1          if (voltage_mV < 100)
 142   1              return 0; // 防止除零或过大输出
 143   1      
 144   1          voltage_mV /= 1000;
 145   1      
 146   1          result = A / my_pow(voltage_mV, n);
 147   1      
 148   1          if (result < 0.0f)
 149   1              result = 0.0f;
 150   1          if (result > 100.0f)
 151   1              result = 100.0f;
 152   1      
 153   1          return (u8)(result + 0.5f); // 四舍五入
 154   1      }
 155          
 156          /**
 157           * @brief  Main program.
 158           * @param  None
 159           * @retval None
 160           */
 161          void main(void)
 162          {
 163   1          // 看门狗默认打开, 复位时间2s
 164   1          WDT_KEY = WDT_KEY_VAL(0xDD); //  关闭看门狗 (如需配置看门狗请查看“WDT\WDT_Reset”示例)
 165   1      
 166   1          system_init();
 167   1      
 168   1          // 关闭HCK和HDA的调试功能
 169   1          WDT_KEY = 0x55;  // 解除写保护
 170   1          IO_MAP &= ~0x01; // 清除这个寄存器的值，实现关闭HCK和HDA引脚的调试功能（解除映射）
 171   1          WDT_KEY = 0xBB;  // 写一个无效的数据，触发写保护
 172   1      
 173   1          uart0_config();
 174   1          timer0_config();
 175   1          timer1_pwm_config(); // 控制充电的PWM
 176   1          timer1_pwm_disable();
 177   1          timer2_pwm_config(); // 控制灯光的pwm
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2025 17:45:29 PAGE 4   

 178   1          timer2_pwm_disable();
 179   1      
 180   1          // timer1_set_pwm_high_feq();
 181   1          // TODO: 7361不用加这个引脚配置:
 182   1          led_pin_config();
 183   1      
 184   1          // 红外接收引脚：
 185   1          P2_MD0 &= ~(GPIO_P23_MODE_SEL(0x03)); // 输入模式
 186   1          P2_PU |= GPIO_P23_PULL_UP(0x01);      // 上拉
 187   1      
 188   1          adc_config();
 189   1      
 190   1          printf("sys reset\n"); 
 191   1      
 192   1      // TODO:
 193   1      // 上电后，需要先点亮红色指示灯，再变为电池电量指示模式
 194   1      // LED_1_ON();
 195   1      // delay_ms(1000);
 196   1      
 197   1      // cur_led_mode = CUR_LED_MODE_INITIAL_DISCHARGE_GEAR;
 198   1      #if 0
                  cur_led_mode = CUR_LED_MODE_BAT_INDICATOR; // 电池电量指示模式
                  cur_initial_discharge_gear = 5;
                  cur_discharge_rate = 3;
              #endif
 203   1      
 204   1          timer1_set_pwm_high_feq();  
 205   1      
 206   1          while (1)
 207   1          {
 208   2              adc_sel_pin(ADC_PIN_DETECT_BATTERY);
 209   2              bat_adc_val = adc_getval(); // 采集电池电压对应的ad值
 210   2              // adc_sel_pin(ADC_PIN_DETECT_CHARGE);
 211   2              // adc_sel_pin_charge(CUR_ADC_REF_3_0_VOL);
 212   2              // charging_adc_val = adc_getval();
 213   2              adc_sel_pin(ADC_PIN_DETECT_CURRENT);
 214   2              current_adc_val = adc_getval();
 215   2      
 216   2              // printf("current_adc_val %u\n", current_adc_val);
 217   2      
 218   2      
 219   2      #if 1
 220   2      
 221   2              if (flag_is_charging_adjust_time_come)
 222   2              {
 223   3                  u16 current = 0; // 充电电流，单位：mA
 224   3                  // u16 voltage_of_charging = 0; // 充电电压，单位：mV
 225   3                  u16 voltage_of_bat = 0; // 电池电压
 226   3                  u32 power = 0;          // 功率，单位：mW 毫瓦
 227   3                  static u8 pwm_duty = 0; //
 228   3                  u16 pwm_reg = 0;
 229   3      
 230   3                  flag_is_charging_adjust_time_come = 0;
 231   3      
 232   3                  // 测试用
 233   3                  // charging_adc_val = 682;
 234   3                  // current_adc_val = 0;
 235   3                  /*
 236   3                      检测电流引脚检测到的电压 == ad值 / 4096 * 参考电压
 237   3                      current_adc_val * 3 / 4096
 238   3      
 239   3                      检测电流的引脚检测到的充电电流 == 检测电流引脚检测到的电压 / 110(运放放大倍数) / 0.005R，
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2025 17:45:29 PAGE 5   

 240   3                      逐步换成单片机可以计算的形式：
 241   3                      current_adc_val * 3 / 4096 / 110 / 0.005
 242   3                      current_adc_val * 3 / 4096 / 110 * 1000 / 5
 243   3                      current_adc_val * 3 * 1000 / 5 / 4096 / 110
 244   3                      得到的是以A为单位的电流，需要再转换成以mA为单位：
 245   3                      current_adc_val * 3 * 1000 * 1000 / 5 / 4096 / 110，计算会溢出，需要再化简
 246   3                      (u32)current_adc_val * 3 * 1000 * (1000 / 5) / 4096 / 110
 247   3                  */
 248   3                  // current = (u32)current_adc_val * 3 * 1000 * (1000 / 5) / 4096 / 150; //
 249   3                  // current = (u32)current_adc_val * 3 * 1000 * (1000 / 5) / 4096 / 110; // 测试的功率有42W
 250   3                  // current = (u32)current_adc_val * 3 * 1000 * (1000 / 5) / 4096 / 90; // 还是有40W功率
 251   3                  current = (u32)current_adc_val * 3 * 1000 * (1000 / 5) / 4096 / 76; //
 252   3                  // current = (u32)current_adc_val * 3 * 1000 * (1000 / 5) / 4096 / 66; //
 253   3      
 254   3                  /*
 255   3                      计算充电电压
 256   3                  */
 257   3                  // voltage_of_charging = (u32)charging_adc_val * 3 * 1000 * 11 / 4096;
 258   3                  // 计算电池电压
 259   3                  voltage_of_bat = (u32)bat_adc_val * 2 * 1000 * 2 / 4096; 
 260   3      
 261   3                  // 如果检测到电流的ad值已经爆表
 262   3                  if (current_adc_val >= 4095)
 263   3                  // if (current >= 5400) // 如果电流值已经爆表，超过单片机能检测的值：5454.54
 264   3                  {
 265   4                      // printf("current overflow\n");
 266   4                      if (pwm_duty > 0)
 267   4                      {
 268   5                          pwm_duty--;
 269   5                      }
 270   4                  }
 271   3                  // // else if (charging_adc_val > 3723) // 充电电压超过30V，关闭PWM输出
 272   3                  // else if (bat_adc_val > 3686) // 电池电压超过3.6V，关闭PWM输出
 273   3                  // {
 274   3                  //     // printf("voltage of charging overflow\n");
 275   3                  //     pwm_duty = 0;
 276   3                  // }
 277   3                  else
 278   3                  {
 279   4                      // power = voltage_of_charging * current / 1000; // 1000mV * 1000mA == 1000000 (1 Watt)
 280   4                      power = voltage_of_bat * current / 1000; // 1000mV * 1000mA == 1000000 (1 Watt)
 281   4      
 282   4                      // printf("power %lu \n", power);
 283   4                      // if (power < 30000) // 30 * 1000 mW
 284   4                      if (power < 25000) // xx * 1000 mW
 285   4                      // if (power < 20000) // xx * 1000 mW
 286   4                      {
 287   5                          if (pwm_duty < 100)
 288   5                          {
 289   6                              pwm_duty++;
 290   6                          }
 291   5                      }
 292   4                      // else if (power > 30000)
 293   4                      else if (power > 25000)
 294   4                      // else if (power > 20000)
 295   4                      {
 296   5                          if (pwm_duty > 0)
 297   5                          {
 298   6                              pwm_duty--;
 299   6                          }
 300   5                      }
 301   4                  }
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2025 17:45:29 PAGE 6   

 302   3      
 303   3                  // printf("pwm_duty : %bu %%\n", pwm_duty);
 304   3                  pwm_reg = (u32)TIMER1_HIGH_FEQ_PEROID_VAL * pwm_duty / 100; // 最终的占空比值
 305   3      
 306   3                  //     // printf("pwm_duty :%u\n", pwm_duty);
 307   3                  TMR1_PWMH = (pwm_reg >> 8) & 0xFF;
 308   3                  TMR1_PWML = pwm_reg & 0xFF;
 309   3              }
 310   2      #endif
 311   2      
 312   2              // {
 313   2              //     u32 charging_voltage_mV = 0;
 314   2              //     u16 pwm_duty = 0;
 315   2      
 316   2              //     // charging_adc_val = 1117; // 测试用
 317   2              //     charging_voltage_mV = (u32)charging_adc_val * 2 * 11 * 1000 / 4096;
 318   2              //     // charging_voltage_mV = 6000; // 测试用
 319   2              //     pwm_duty = calculate_duty(charging_voltage_mV);
 320   2              //     pwm_duty = (u32)TIMER1_HIGH_FEQ_PEROID_VAL * pwm_duty / 100; // 最终的占空比值
 321   2      
 322   2              //     // printf("pwm_duty :%u\n", pwm_duty);
 323   2              //     TMR1_PWMH = (pwm_duty >> 8) & 0xFF;
 324   2              //     TMR1_PWML = pwm_duty & 0xFF;
 325   2              // }
 326   2      
 327   2      #if 0
                      {
                          u32 tmp = 0;
              
                          // tmp = (u32)124286 - (u32)charging_adc_val * 7857 * 2 * 11 / 4096;
                          tmp = (u32)88101 - (u32)charging_adc_val * 2471 * 2 * 11 / 4096;
              
                          // tmp = (((u32)TMR1_PRH << 8) | (u32)TMR1_PRL) * (u32)tmp / 1000; // 最终的占空比值（用这个计
             -算，得出的值是0）
                          tmp = (u32)TIMER1_HIGH_FEQ_PEROID_VAL * tmp / 1000 / 100; // 最终的占空比值
              
                          /*
                              由于公式限制，可能充电电压大于15V就会导致占空比变为0，现在不让它到0%
                          */
                          if (0 == (u16)tmp)
                          // if (0 == tmp)
                          {
                              tmp = 0;
                          }
              
                          TMR1_PWMH = (tmp >> 8) & 0xFF;
                          TMR1_PWML = tmp & 0xFF;
                      }
              #endif
 350   2      
 351   2              // ir_handle();
 352   2              // charge_handle();
 353   2              // led_handle_update_percent_of_bat();
 354   2      
 355   2      #if 0 // 缓慢调节驱动灯光的pwm占空比
              
                      {
                          // static u8 cnt =0;
              
                          // 暂定每100us调节一次
              
                          if (cur_light_pwm_duty_val > expect_light_pwm_duty_val)
C51 COMPILER V9.60.7.0   MAIN                                                              07/11/2025 17:45:29 PAGE 7   

                          {
                              cur_light_pwm_duty_val--;
                          }
                          else if (cur_light_pwm_duty_val < expect_light_pwm_duty_val)
                          {
                              cur_light_pwm_duty_val++;
                          }
              
                          SET_LIGHT_PWM_DUTY(cur_light_pwm_duty_val);
                          // timer2_set_pwm_duty(cur_light_pwm_duty_val);
                      }
              
              #endif // 缓慢调节驱动灯光的pwm占空比
 376   2          }
 377   1      }
 378          
 379          /**
 380           * @}
 381           */
 382          
 383          /*************************** (C) COPYRIGHT 2022 HUGE-IC ***** END OF FILE *****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1340    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =     15      64
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
