C51 COMPILER V9.60.7.0   MAIN                                                              07/22/2025 17:46:19 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Release\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) INCDI
                    -R(..\..\Libraries\Include;..\..\User;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\main.lst) O
                    -BJECT(.\Release\Objects\main.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    main.c
   4           * @author  HUGE-IC Application Team
   5           * @version V1.0.0
   6           * @date    01-05-2021
   7           * @brief   Main program body
   8           ******************************************************************************
   9           * @attention
  10           *
  11           * <h2><center>&copy; COPYRIGHT 2021 HUGE-IC</center></h2>
  12           *
  13           * 版权说明后续补上
  14           *
  15           ******************************************************************************
  16           */
  17          
  18          /* Includes ------------------------------------------------------------------*/
  19          #include "include.h"
  20          #include <stdio.h>
  21          
  22          #include "user_config.h"
  23          
  24          volatile bit_flag flag1 = {0};
  25          volatile bit_flag flag2 = {0};
  26          
  27          // =================================================================
  28          // 红外接收相关变量                                                //
  29          // =================================================================
  30          volatile u8 ir_data = 0;
  31          volatile bit flag_is_recv_ir_repeat_code = 0;
  32          volatile bit flag_is_recved_data = 0;
  33          
  34          // =================================================================
  35          // 充电控制相关变量                                                 //
  36          // =================================================================
  37          volatile u16 bat_adc_val;                                           // 电池电压检测脚采集到的ad值
  38          volatile u16 charging_adc_val;                                      // 充电电压检测脚采集的ad值
  39          volatile u16 current_adc_val;                                       // 充电电流检测脚采集的ad值
  40          volatile u8 flag_is_charging_adjust_time_come = 0;                  // 调节充电的时间到来
  41          volatile u8 cur_charging_pwm_status = CUR_CHARGING_PWM_STATUS_NONE; // 控制充电的PWM状态
  42          volatile u8 cur_charge_phase = CUR_CHARGE_PHASE_NONE;               // 记录当前充电阶段
  43          
  44          // =================================================================
  45          // 指示灯控制相关变量                                               //
  46          // =================================================================
  47          volatile u8 cur_initial_discharge_gear; // 初始放电挡位（需要记忆）
  48          volatile u8 cur_discharge_rate;         // 初始放电速率（需要记忆）
  49          volatile u8 cur_led_mode;               // 当前的LED模式
  50          // volatile u8 last_led_mode; // 上次的led模式
  51          volatile u8 cur_led_gear;             // 当前led挡位
  52          volatile u8 last_led_gear;            // 上次led挡位（只能在刚上电时清零赋初始值）
  53          volatile u8 cur_led_gear_in_charging; // 充电指示，对应的挡位
C51 COMPILER V9.60.7.0   MAIN                                                              07/22/2025 17:46:19 PAGE 2   

  54          
  55          volatile bit flag_is_in_setting_mode = 0;              // 是否处于设置模式
  56          volatile u8 flag_led_setting_mode_exit_times_come = 0; // 标志位，led退出设置模式的时间到来
  57          volatile u16 led_setting_mode_exit_times_cnt = 0;      // 特殊的LED模式，退出时间计数
  58          
  59          volatile bit flag_is_in_struction_mode = 0;               // 是否处于指示模式
  60          volatile bit flag_led_struction_mode_exit_times_come = 0; // 退出指示灯指示模式的时间到来
  61          volatile u16 led_struction_mode_exit_times_cnt = 0;       // 退出指示灯指示模式时间计数
  62          
  63          volatile bit flag_led_gear_update_times_come = 0; // 指示灯状态更新的时间到来
  64          // volatile u16 led_gear_update_times_cnt = 0; // 指示灯状态更新的时间计数
  65          
  66          // 标志位，是否要回到 led_off 模式
  67          volatile bit flag_is_led_off_enable = 0;
  68          
  69          // =================================================================
  70          // 主灯光控制相关变量                                               //
  71          // =================================================================
  72          volatile u32 light_adjust_time_cnt = 0;    // 调节灯光的时间计数，暂定为每1s加一
  73          volatile u8 light_ctl_phase_in_rate_1 = 1; // 在放电速率M1时，使用到的变量，在计算公式里面用作系数，每次唤
             -醒时需要初始化为1
  74          
  75          // TODO：3260使用16位寄存器，7361使用8位寄存器，要进行适配修改
  76          volatile u16 cur_light_pwm_duty_val = 0; // 当前灯光对应的占空比值
  77          // volatile u16 expect_light_pwm_duty_val = 0;                  // 期望调节到的、灯光对应的占空比值
  78          volatile u8 flag_is_light_adjust_time_come = 0;              // 调节灯光的时间到来，目前为1s
  79          volatile u8 flag_is_light_pwm_duty_val_adjust_time_come = 0; // 灯光占空比值调节时间到来
  80          
  81          volatile u8 flag_is_ctl_light_blink = 0; // 是否控制主灯光闪烁
  82          volatile u8 light_ctl_blink_times = 0;   // 要控制主灯光闪烁的次数
  83          /*
  84              是否要在设置模式期间关闭主灯光
  85          
  86              如果已经关灯，在设置模式期间，主灯闪烁完成后，直接关灯
  87          */
  88          volatile bit flag_allow_light_in_setting_mode = 0;
  89          
  90          // 是否要缓慢调节主灯光的占空比
  91          volatile bit flag_is_adjust_light_slowly = 0;
  92          volatile u16 expect_light_pwm_duty_val = 0; // 期望缓慢调节到的、主灯光对应的占空比值
  93          
  94          // 是否开启了定时关机功能：
  95          volatile bit flag_is_auto_shutdown_enable = 0;
  96          volatile u32 light_auto_shutdown_time_cnt = 0;     // 定时关机功能的定时器计数，单位：ms
  97          volatile bit flag_is_auto_shutdown_times_come = 0; // 定时关机的时间到来
  98          
  99          // 短按减小灯光亮度，对应各个挡位亮度的占空比值
 100          const u16 light_pwm_sub_table[9] = {
 101              (u16)((u32)TIMER2_FEQ * 8367 / 10000), // 83.67 %
 102              (u16)((u32)TIMER2_FEQ * 7371 / 10000), // 73.71 %
 103              (u16)((u32)TIMER2_FEQ * 6375 / 10000), // 63.75 %
 104              (u16)((u32)TIMER2_FEQ * 5379 / 10000), // 53.79 %
 105              (u16)((u32)TIMER2_FEQ * 4383 / 10000), // 43.83 %
 106              (u16)((u32)TIMER2_FEQ * 3387 / 10000), // 33.87 %
 107              (u16)((u32)TIMER2_FEQ * 2391 / 10000), // 23.91 %
 108              (u16)((u32)TIMER2_FEQ * 1395 / 10000), // 13.95 %
 109              (u16)((u32)TIMER2_FEQ * 478 / 10000),  // 4.78 %
 110          };
 111          
 112          // 短按增加灯光亮度，对应各个挡位亮度的占空比值
 113          const u16 light_pwm_add_table[9] = {
 114              (u16)((u32)TIMER2_FEQ * 478 / 10000),  // 4.78 %
C51 COMPILER V9.60.7.0   MAIN                                                              07/22/2025 17:46:19 PAGE 3   

 115              (u16)((u32)TIMER2_FEQ * 1474 / 10000), // 14.74 %
 116              (u16)((u32)TIMER2_FEQ * 2470 / 10000), // 24.70 %
 117              (u16)((u32)TIMER2_FEQ * 3466 / 10000), // 34.66 %
 118              (u16)((u32)TIMER2_FEQ * 4462 / 10000), // 44.62 %
 119              (u16)((u32)TIMER2_FEQ * 5458 / 10000), // 54.58 %
 120              (u16)((u32)TIMER2_FEQ * 6554 / 10000), // 65.54 %
 121              (u16)((u32)TIMER2_FEQ * 7450 / 10000), // 74.50 %
 122              (u16)((u32)TIMER2_FEQ * 8367 / 10000), // 83.67 %
 123          };
 124          
 125          const u16 light_pwm_duty_init_val_table[5] = {
 126              (u16)((u32)TIMER2_FEQ * 8367 / 10000), // 83.67 %
 127              (u16)((u32)TIMER2_FEQ * 7411 / 10000), // 74.11 %
 128              (u16)((u32)TIMER2_FEQ * 6455 / 10000), // 64.55 %
 129              (u16)((u32)TIMER2_FEQ * 5698 / 10000), // 56.98 %
 130              (u16)((u32)TIMER2_FEQ * 4980 / 10000), // 49.80 %
 131          };
 132          
 133          void led_pin_config(void)
 134          {
 135   1          P1_MD0 &= ~GPIO_P11_MODE_SEL(0x03);
 136   1          P1_MD0 |= GPIO_P11_MODE_SEL(0x01);
 137   1          FOUT_S11 = GPIO_FOUT_AF_FUNC;
 138   1          P11 = 0; // 如果不给初始值，上电之后，指示灯会闪一下
 139   1      
 140   1          P1_MD0 &= ~GPIO_P12_MODE_SEL(0x03);
 141   1          P1_MD0 |= GPIO_P12_MODE_SEL(0x01);
 142   1          FOUT_S12 = GPIO_FOUT_AF_FUNC;
 143   1          P12 = 0;
 144   1      
 145   1          P1_MD0 &= ~GPIO_P13_MODE_SEL(0x03);
 146   1          P1_MD0 |= GPIO_P13_MODE_SEL(0x01);
 147   1          FOUT_S13 = GPIO_FOUT_AF_FUNC;
 148   1          P13 = 0;
 149   1      
 150   1          P1_MD1 &= ~GPIO_P14_MODE_SEL(0x03);
 151   1          P1_MD1 |= GPIO_P14_MODE_SEL(0x01);
 152   1          FOUT_S14 = GPIO_FOUT_AF_FUNC;
 153   1          P14 = 0;
 154   1      
 155   1          P1_MD1 &= ~GPIO_P15_MODE_SEL(0x03);
 156   1          P1_MD1 |= GPIO_P15_MODE_SEL(0x01);
 157   1          FOUT_S15 = GPIO_FOUT_AF_FUNC;
 158   1          P15 = 0;
 159   1      }
 160          
 161          /*
 162              变量、参数，初始化
 163          
 164              如果是第一次上电，需要读出存放的数据
 165          */
 166          void param_init(void)
 167          {
 168   1          light_ctl_phase_in_rate_1 = 1;
 169   1      
 170   1          cur_initial_discharge_gear = 5; // 初始放电挡位（需要记忆）
 171   1          cur_discharge_rate = 2;         // 初始放电速率（需要记忆）
 172   1      }
 173          
 174          /**
 175           * @brief  Main program.
 176           * @param  None
C51 COMPILER V9.60.7.0   MAIN                                                              07/22/2025 17:46:19 PAGE 4   

 177           * @retval None
 178           */
 179          void main(void)
 180          {
 181   1          // 看门狗默认打开, 复位时间2s
 182   1          WDT_KEY = WDT_KEY_VAL(0xDD); //  关闭看门狗 (如需配置看门狗请查看“WDT\WDT_Reset”示例)
 183   1      
 184   1          system_init();
 185   1      
 186   1          // 关闭HCK和HDA的调试功能
 187   1          WDT_KEY = 0x55;  // 解除写保护
 188   1          IO_MAP &= ~0x01; // 清除这个寄存器的值，实现关闭HCK和HDA引脚的调试功能（解除映射）
 189   1          WDT_KEY = 0xBB;  // 写一个无效的数据，触发写保护
 190   1      
 191   1          uart0_config();
 192   1          my_debug_led_config();
 193   1      
 194   1          timer0_config();
 195   1          timer1_pwm_config(); // 控制充电的PWM
 196   1          timer1_pwm_disable();
 197   1          timer2_pwm_config(); // 控制灯光的pwm
 198   1          timer2_pwm_disable();
 199   1      
 200   1          // timer1_set_pwm_high_feq();
 201   1          // TODO: 7361不用加这个引脚配置:
 202   1          led_pin_config();
 203   1      
 204   1          // 红外接收引脚：
 205   1          P2_MD0 &= ~(GPIO_P23_MODE_SEL(0x03)); // 输入模式
 206   1          P2_PU |= GPIO_P23_PULL_UP(0x01);      // 上拉
 207   1      
 208   1          adc_config();
 209   1      
 210   1          // printf("sys reset\n"); // 打印至少占用1012字节空间
 211   1      
 212   1          // TODO:
 213   1          // 上电后，需要先点亮红色指示灯，再变为电池电量指示模式
 214   1          // LED_1_ON();
 215   1          // delay_ms(1000);
 216   1      
 217   1          // cur_led_mode = CUR_LED_MODE_INITIAL_DISCHARGE_GEAR;
 218   1      
 219   1      #if 0
                  cur_led_mode = CUR_LED_MODE_BAT_INDICATOR; // 电池电量指示模式
                  cur_initial_discharge_gear = 5;
                  cur_discharge_rate = 3;
              #endif
 224   1      
 225   1          // cur_led_mode = CUR_LED_MODE_CHARGING;
 226   1      
 227   1          // bat_adc_val = 2000;
 228   1          // led_status_refresh();
 229   1          // cur_led_mode = CUR_LED_MODE_BAT_INDICATOR;
 230   1      
 231   1          param_init();
 232   1      
 233   1          light_init();
 234   1          led_init();
 235   1          led_mode_alter(CUR_LED_MODE_BAT_INDICATOR); // 电池电量指示模式
 236   1      
 237   1          // light_ctl_blink_times = 3;
 238   1          // flag_is_ctl_light_blink = 1;
C51 COMPILER V9.60.7.0   MAIN                                                              07/22/2025 17:46:19 PAGE 5   

 239   1      
 240   1          while (1)
 241   1          {
 242   2      
 243   2      #if 1
 244   2      
 245   2              charge_handle();
 246   2              ir_handle(); // 函数内部会判断是否在充电，如果在充电则退出
 247   2      
 248   2              /*
 249   2                  【非充电模式】 -> 【充电模式】
 250   2      
 251   2                  如果当前正在充电，但是指示灯没有切换到充电指示模式，则切换：
 252   2              */
 253   2              if (CUR_CHARGE_PHASE_NONE != cur_charge_phase)
 254   2              {
 255   3                  // if (cur_led_mode != CUR_LED_MODE_CHARGING && /* 指示灯不处于充电模式 */
 256   3                  //     cur_led_mode != CUR_LED_MODE_OFF)
 257   3                  if (cur_led_mode != CUR_LED_MODE_CHARGING) /* 指示灯不处于充电模式 */
 258   3                  {
 259   4                      // 清空定时关机相关的变量
 260   4                      flag_is_auto_shutdown_enable = 0;
 261   4                      led_status_clear();
 262   4                      led_mode_alter(CUR_LED_MODE_CHARGING);
 263   4                  }
 264   3      
 265   3                  // 需要关闭主灯光
 266   3                  LIGHT_OFF();
 267   3              } // if (CUR_CHARGE_PHASE_NONE != cur_charge_phase)
 268   2              else // CUR_CHARGE_PHASE_NONE == cur_charge_phase
 269   2              {
 270   3                  /*
 271   3                      【充电模式】 -> 【放电、点亮主灯光、指示灯对应电池电量指示】
 272   3                      如果当前没有在充电，并且指示灯处于充电指示模式，
 273   3                      切换回电池电量指示模式
 274   3      
 275   3                      测试时发现从充电到断开充电，led指示灯还在闪烁，需要加上这补丁
 276   3                  */
 277   3                  if (cur_led_mode == CUR_LED_MODE_CHARGING)
 278   3                  {
 279   4                      led_status_clear();
 280   4                      led_mode_alter(CUR_LED_MODE_BAT_INDICATOR);
 281   4                      // 需要打开主灯光
 282   4      
 283   4                      // 查表，获得挡位对应的占空比值
 284   4                      cur_light_pwm_duty_val = light_pwm_duty_init_val_table[cur_initial_discharge_gear - 1];
 285   4      
 286   4                      LIGHT_SET_PWM_DUTY(cur_light_pwm_duty_val); // 立刻更新PWM占空比
 287   4                      LIGHT_ON();                                 // 使能 PWM 输出
 288   4                  }
 289   3              }
 290   2      
 291   2              // 如果定时关机的时间到来
 292   2              if (flag_is_auto_shutdown_times_come)
 293   2              {
 294   3                  flag_is_auto_shutdown_times_come = 0; // 清空定时关机标志
 295   3                  flag_is_auto_shutdown_enable = 0;     // 不允许自动关机
 296   3                  led_status_clear();
 297   3                  cur_led_mode = CUR_LED_MODE_OFF;
 298   3                  cur_light_pwm_duty_val = 0;
 299   3                  LIGHT_OFF();
 300   3      
C51 COMPILER V9.60.7.0   MAIN                                                              07/22/2025 17:46:19 PAGE 6   

 301   3                  // printf("power off\n");
 302   3              }
 303   2      
 304   2              adc_update_bat_adc_val();
 305   2              led_handle();
 306   2              light_handle();
 307   2      
 308   2      #if 0  // 每隔一段时间，打印调试信息：
              
                      {
                          static u8 cnt = 0;
                          cnt++;
                          if (cnt >= 200)
                          {
                              cnt = 0;
                              // printf("bat_adc_val %u\n", bat_adc_val);
                              // printf("cur_light_pwm_duty_val %u\n", cur_light_pwm_duty_val);
                              // printf("cur light pwm percent %bu %%\n", (u8)((u32)cur_light_pwm_duty_val * 100 / TIMER
             -2_FEQ));
              
                              switch (cur_led_mode)
                              {
                              case CUR_LED_MODE_OFF:
                                  printf("led mode off\n");
                                  break;
              
                              case CUR_LED_MODE_BAT_INDICATOR:
                                  printf("led mode bat indicator\n");
                                  break;
              
                              case CUR_LED_MODE_CHARGING:
                                  printf("led mode charging\n");
                                  break;
              
                              case CUR_LED_MODE_SETTING:
                                  printf("led mode setting\n");
                                  break;
              
                              case CUR_LED_MODE_INITIAL_DISCHARGE_GEAR_IN_SETTING_MODE:
                                  printf("led mode initial discharge gear in setting mode\n");
                                  break;
              
                              case CUR_LED_MODE_DISCHARGE_RATE_IN_SETTING_MODE:
                                  printf("led mode discharge rate in setting mode\n");
                                  break;
              
                              case CUR_LED_MODE_BAT_INDICATIOR_IN_INSTRUCTION_MODE:
                                  printf("led mode bat indicator in instruction mode\n");
                                  break;
              
                              case CUR_LED_MODE_INITIAL_DISCHARGE_GEAR_IN_INSTRUCTION_MODE:
                                  printf("led mode initial discharge gear in instruction mode\n");
                                  break;
              
                              case CUR_LED_MODE_DISCHARGE_RATE_IN_INSTRUCTION_MODE:
                                  printf("led mode discharge rate in instruction mode\n");
                                  break;
              
                              default:
                                  break;
                              }
                          }
C51 COMPILER V9.60.7.0   MAIN                                                              07/22/2025 17:46:19 PAGE 7   

                      }
              #endif // 每隔一段时间，打印调试信息
 364   2      
 365   2      #if 0 // demo板使用到的调试指示灯
                      if (CUR_CHARGE_PHASE_NONE == cur_charge_phase)
                      {
                          my_debug_led_2_off();
                          my_debug_led_3_off();
                          my_debug_led_4_off();
              
                          my_debug_led_1_on();
                      }
                      else if (CUR_CHARGE_PHASE_NORMAL_CHARGE == cur_charge_phase)
                      {
                          my_debug_led_1_off();
                          my_debug_led_3_off();
                          my_debug_led_4_off();
              
                          my_debug_led_2_on();
                      }
                      else if (CUR_CHARGE_PHASE_TRICKLE_CHARGE_WHEN_APPROACH_FULLY_CHARGE == cur_charge_phase)
                      {
                          my_debug_led_1_off();
                          my_debug_led_2_off();
                          my_debug_led_4_off();
              
                          my_debug_led_3_on();
                      }
                      else if (CUR_CHARGE_PHASE_FULLY_CHARGE == cur_charge_phase)
                      {
                          my_debug_led_1_off();
                          my_debug_led_2_off();
                          my_debug_led_3_off();
              
                          my_debug_led_4_on();
                      }
              #endif // demo板使用到的调试指示灯
 399   2      
 400   2      #if 0 // 缓慢调节驱动灯光的pwm占空比（还未调试完成）
              
                      {
                          // static u8 cnt =0;
              
                          // 暂定每100us调节一次
              
                          if (cur_light_pwm_duty_val > expect_light_pwm_duty_val)
                          {
                              cur_light_pwm_duty_val--;
                          }
                          else if (cur_light_pwm_duty_val < expect_light_pwm_duty_val)
                          {
                              cur_light_pwm_duty_val++;
                          }
              
                          SET_LIGHT_PWM_DUTY(cur_light_pwm_duty_val);
                          // timer2_set_pwm_duty(cur_light_pwm_duty_val);
                      }
              
              #endif // 缓慢调节驱动灯光的pwm占空比（还未调试完成）
 421   2      
 422   2      #endif
 423   2          }
C51 COMPILER V9.60.7.0   MAIN                                                              07/22/2025 17:46:19 PAGE 8   

 424   1      }
 425          
 426          /**
 427           * @}
 428           */
 429          
 430          /*************************** (C) COPYRIGHT 2022 HUGE-IC ***** END OF FILE *****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    288    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     86    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     11    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
