C51 COMPILER V9.60.7.0   ADC                                                               07/17/2025 14:33:58 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Release\Objects\adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\adc.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) IN
                    -CDIR(..\..\Libraries\Include;..\..\User;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\adc.lst)
                    - OBJECT(.\Release\Objects\adc.obj)

line level    source

   1          #include "adc.h"
   2          
   3          volatile u16 adc_val = 0;
   4          
   5          void adc_config(void)
   6          {
   7   1          // P1_MD0 |= GPIO_P13_MODE_SEL(0x03);
   8   1          P1_MD1 |= GPIO_P16_MODE_SEL(0x03); // 检测充电电压
   9   1      
  10   1          P2_MD0 |= GPIO_P22_MODE_SEL(0x03); // 检测电池电压
  11   1      
  12   1          P3_MD0 |= GPIO_P31_MODE_SEL(0x03); // 检测充电电流（流入电池的电流）
  13   1      
  14   1          ADC_CFG1 |= (0x0F << 3); // ADC时钟分频为16分频，为系统时钟/16
  15   1          ADC_CFG2 = 0xFF;         // 通道0采样时间配置为256个采样时钟周期
  16   1      
  17   1          ADC_ACON1 &= ~((0x01 << 5) |   /* 关闭ADC外部参考选择信号 */
  18   1                         (0x07 << 0));   /* 清空ADC内部参考电压的选择配置 */
  19   1          ADC_ACON1 |= (0x01 << 6) |     /* 使能adc内部参考 */
  20   1                       (0x03 << 3) |     /* 关闭测试信号 */
  21   1                       (0x01 << 0);      /* 选择 内部 2.0V 作为参考电压 */
  22   1          ADC_ACON0 = ADC_CMP_EN(0x1) |  // 打开ADC中的CMP使能信号
  23   1                      ADC_BIAS_EN(0x1) | // 打开ADC偏置电流能使信号
  24   1                      ADC_BIAS_SEL(0x1); // 偏置电流选择：1x
  25   1          ADC_TRGS0 |= (0x07 << 4);      // 通道 0DLY 的 ADC 时钟个数选择，配置为 4n+1，4 * 29 + 1
  26   1          ADC_CHS0 |= (0x01 << 6);       // 使能 通道 0DLY 功能
  27   1      }
  28          
  29          /**
  30           * @brief 切换adc的参考电压
  31           *
  32           * @param adc_ref_voltage
  33           *              ADC_REF_2_0_VOL = 0x00, // adc使用2.0V参考电压
  34                          ADC_REF_3_0_VOL,        // adc使用3.0V参考电压
  35           */
  36          void adc_sel_ref_voltage(u8 adc_ref_voltage)
  37          {
  38   1          ADC_ACON1 &= ~((0x01 << 5) | /* 关闭ADC外部参考选择信号 */
  39   1                         (0x07 << 0)); /* 清空ADC内部参考电压的选择配置 */
  40   1      
  41   1          if (ADC_REF_2_0_VOL == adc_ref_voltage)
  42   1          {
  43   2              ADC_ACON1 |= (0x01 << 6) | /* 使能adc内部参考 */
  44   2                           (0x03 << 3) | /* 关闭测试信号 */
  45   2                           (0x01 << 0);  /* 选择 内部 2.0V 作为参考电压 */
  46   2          }
  47   1          else if (ADC_REF_3_0_VOL == adc_ref_voltage)
  48   1          {
  49   2              ADC_ACON1 |= (0x01 << 6) | /* 使能adc内部参考 */
  50   2                           (0x03 << 3) | /* 关闭测试信号 */
  51   2                           (0x03 << 0);  /* 选择 内部 3.0V 作为参考电压 */
  52   2          }
  53   1      
C51 COMPILER V9.60.7.0   ADC                                                               07/17/2025 14:33:58 PAGE 2   

  54   1          ADC_CFG0 |= ADC_CHAN0_EN(0x1) | // 使能通道0转换
  55   1                      ADC_EN(0x1);        // 使能A/D转换
  56   1          delay_ms(1);                    // 等待adc稳定
  57   1      }
  58          
  59          /**
  60           * @brief 切换检测ad的引脚（函数内部只切换引脚，不切换参考电压）
  61           *
  62           * @param adc_pin
  63           * @return * void
  64           */
  65          void adc_sel_pin(u8 adc_pin)
  66          {
  67   1          // ADC_CFG0 &= ~((0x01 << 6) | (0x01 << 3)); // 关闭adc，不使能通道0转换
  68   1          ADC_CHS0 &= ~((0x01 << 7) | /* 数据格式左对齐 */
  69   1                        (0x01 << 5) | // 选择内部通道
  70   1                        (0x01 << 4) |
  71   1                        (0x01 << 3) |
  72   1                        (0x01 << 2) |
  73   1                        (0x01 << 1) |
  74   1                        (0x01 << 0)); // 选择外部通路，清空选择的adc0通路
  75   1      
  76   1          if (ADC_PIN_DETECT_CHARGE == adc_pin)
  77   1          {
  78   2              ADC_CHS0 |= (0x0E << 0); // P16 对应的模拟通道
  79   2          }
  80   1          else if (ADC_PIN_DETECT_BATTERY == adc_pin)
  81   1          {
  82   2              ADC_CHS0 |= (0x12 << 0); // P22 对应的模拟通道
  83   2          }
  84   1          else if (ADC_PIN_DETECT_CURRENT == adc_pin)
  85   1          {
  86   2              ADC_CHS0 |= (0x19 << 0); // P31 对应的模拟通道
  87   2          }
  88   1      
  89   1          ADC_CFG0 |= ADC_CHAN0_EN(0x1) | // 使能通道0转换
  90   1                      ADC_EN(0x1);        // 使能A/D转换
  91   1          delay_ms(1);                    // 等待adc稳定
  92   1      }
  93          
  94          // adc采集+滤波
  95          u16 adc_getval(void)
  96          {
  97   1          u8 i = 0; // adc采集次数的计数
  98   1          volatile u16 g_temp_value = 0;
  99   1          volatile u32 g_tmpbuff = 0;
 100   1          volatile u16 g_adcmax = 0;
 101   1          volatile u16 g_adcmin = 0xFFFF;
 102   1      
 103   1          // 采集20次，去掉前两次采样，再去掉一个最大值和一个最小值，再取平均值
 104   1          for (i = 0; i < 20; i++)
 105   1          {
 106   2              ADC_CFG0 |= ADC_CHAN0_TRG(0x1); // 触发ADC0转换
 107   2              while (!(ADC_STA & ADC_CHAN0_DONE(0x1)))
 108   2                  ;                                                 // 等待转换完成
 109   2              g_temp_value = (ADC_DATAH0 << 4) | (ADC_DATAL0 >> 4); // 读取 channel0 的值
 110   2              ADC_STA = ADC_CHAN0_DONE(0x1);                        // 清除ADC0转换完成标志位
 111   2      
 112   2              if (i < 2)
 113   2                  continue; // 丢弃前两次采样的
 114   2              if (g_temp_value > g_adcmax)
 115   2                  g_adcmax = g_temp_value; // 最大
C51 COMPILER V9.60.7.0   ADC                                                               07/17/2025 14:33:58 PAGE 3   

 116   2              if (g_temp_value < g_adcmin)
 117   2                  g_adcmin = g_temp_value; // 最小
 118   2      
 119   2              g_tmpbuff += g_temp_value;
 120   2          }
 121   1      
 122   1          g_tmpbuff -= g_adcmax;           // 去掉一个最大
 123   1          g_tmpbuff -= g_adcmin;           // 去掉一个最小
 124   1          g_temp_value = (g_tmpbuff >> 4); // 除以16，取平均值
 125   1      
 126   1          return g_temp_value;
 127   1      }
 128          
 129          /**
 130           * @brief 更新电池对应的ad值，内部使用2.0V参考电压
 131           *
 132           */
 133          void adc_update_bat_adc_val(void)
 134          {
 135   1          adc_sel_ref_voltage(ADC_REF_2_0_VOL);
 136   1          adc_sel_pin(ADC_PIN_DETECT_BATTERY);
 137   1          bat_adc_val = adc_getval();
 138   1      }
 139          
 140          /**
 141           * @brief 更新充电对应的ad值
 142           *
 143           * @param adc_ref_voltage
 144           *          ADC_REF_2_0_VOL 使用2.0V作为参考电压
 145           *          ADC_REF_3_0_VOL 使用3.0V作为参考电压
 146           */
 147          void adc_update_charge_adc_val(u8 adc_ref_voltage)
 148          {
 149   1          adc_sel_ref_voltage(adc_ref_voltage);
 150   1          adc_sel_pin(ADC_PIN_DETECT_CHARGE);
 151   1          charging_adc_val = adc_getval();
 152   1      }
 153          
 154          /**
 155           * @brief 更新电流对应的ad值，内部使用3.0V参考电压
 156           *
 157           */
 158          void adc_update_current_adc_val(void)
 159          {
 160   1          adc_sel_ref_voltage(ADC_REF_3_0_VOL);
 161   1          adc_sel_pin(ADC_PIN_DETECT_CURRENT);
 162   1          current_adc_val = adc_getval();
 163   1      }
 164          
 165          
 166          #if 0  // 滑动平均
              /* 滑动平均 */
              static volatile u16 bat_adc_val_samples[BAT_ADC_VAL_SAMPLE_COUNT];
              static volatile u8 bat_adc_val_sample_index = 0;
              u16 get_filtered_bat_adc_val(u16 bat_adc_val)
              {
                  u8 i = 0;
                  u32 sum = 0;
                  bat_adc_val_samples[bat_adc_val_sample_index++] = bat_adc_val;
                  if (bat_adc_val_sample_index >= BAT_ADC_VAL_SAMPLE_COUNT)
                      bat_adc_val_sample_index = 0;
              
C51 COMPILER V9.60.7.0   ADC                                                               07/17/2025 14:33:58 PAGE 4   

                  for (i = 0; i < BAT_ADC_VAL_SAMPLE_COUNT; i++)
                      sum += bat_adc_val_samples[i];
              
                  return sum / BAT_ADC_VAL_SAMPLE_COUNT;
              }
              #endif // 滑动平均


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    550    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
