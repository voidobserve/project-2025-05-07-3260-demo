C51 COMPILER V9.60.7.0   ADC                                                               07/01/2025 17:03:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Release\Objects\adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\adc.c OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) INCDIR(.
                    -.\..\Libraries\Include;..\..\User;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\adc.lst) OBJEC
                    -T(.\Release\Objects\adc.obj)

line level    source

   1          #include "adc.h"
   2          
   3          volatile u16 adc_val = 0;
   4          
   5          void adc_config(void)
   6          {
   7   1          // P1_MD0 |= GPIO_P13_MODE_SEL(0x03);
   8   1          P1_MD1 |= GPIO_P16_MODE_SEL(0x03);
   9   1      
  10   1          P2_MD0 |= GPIO_P22_MODE_SEL(0x03);
  11   1      
  12   1          // P2_MD1 |= GPIO_P23_MODE_SEL(0x3); // 模拟模式
  13   1          // P2_MD1 |= GPIO_P24_MODE_SEL(0x3); // 模拟模式
  14   1      
  15   1          // P1_MD1 |= GPIO_P16_MODE_SEL(0x03); // 模拟模式
  16   1          // P3_MD0 |= GPIO_P31_MODE_SEL(0x3);
  17   1      
  18   1          ADC_CFG1 |= (0x0F << 3); // ADC时钟分频为16分频，为系统时钟/16
  19   1          ADC_CFG2 = 0xFF;         // 通道0采样时间配置为256个采样时钟周期
  20   1      
  21   1          ADC_ACON1 &= ~((0x01 << 5) |   /* 关闭ADC外部参考选择信号 */
  22   1                         (0x07 << 0));   /* 清空ADC内部参考电压的选择配置 */
  23   1          ADC_ACON1 |= (0x01 << 6) |     /* 使能adc内部参考 */
  24   1                       (0x03 << 3) |     /* 关闭测试信号 */
  25   1                       (0x01 << 0);      /* 选择 内部 2.0V 作为参考电压 */
  26   1          ADC_ACON0 = ADC_CMP_EN(0x1) |  // 打开ADC中的CMP使能信号
  27   1                      ADC_BIAS_EN(0x1) | // 打开ADC偏置电流能使信号
  28   1                      ADC_BIAS_SEL(0x1); // 偏置电流选择：1x
  29   1          ADC_TRGS0 |= (0x07 << 4);      // 通道 0DLY 的 ADC 时钟个数选择，配置为 4n+1，4 * 29 + 1
  30   1          ADC_CHS0 |= (0x01 << 6);       // 使能 通道 0DLY 功能
  31   1      }
  32          
  33          void adc_sel_pin(u8 adc_pin)
  34          {
  35   1          ADC_CFG0 &= ~((0x01 << 6) | (0x01 << 3)); // 关闭adc，不使能通道0转换
  36   1          ADC_CHS0 &= ~((0x01 << 7) |               /* 数据格式左对齐 */
  37   1                        (0x01 << 5) |               // 选择内部通道
  38   1                        (0x01 << 4) |
  39   1                        (0x01 << 3) |
  40   1                        (0x01 << 2) |
  41   1                        (0x01 << 1) |
  42   1                        (0x01 << 0)); // 选择外部通路，清空选择的adc0通路
  43   1      
  44   1          if (ADC_PIN_DETECT_CHARGE == adc_pin)
  45   1          {
  46   2              //  ADC_CHS0 |= (0x0B << 0); // P13 对应的模拟通道
  47   2              ADC_CHS0 |= (0x0E << 0); // P16 对应的模拟通道
  48   2              // ADC_CHS0 |= (0x14 << 0); // P24 对应的模拟通道
  49   2              // ADC_CHS0 = ADC_ANALOG_CHAN(0x19) | // 选则引脚对应的通道（0x19--P31）
  50   2              //            ADC_EXT_SEL(0x0);       // 选择外部通道
  51   2          }
  52   1          else if (ADC_PIN_DETECT_BATTERY == adc_pin)
  53   1          {
C51 COMPILER V9.60.7.0   ADC                                                               07/01/2025 17:03:25 PAGE 2   

  54   2              ADC_CHS0 |= (0x12 << 0); // P22 对应的模拟通道
  55   2              // ADC_CHS0 |= (0x13 << 0); // P23 对应的模拟通道
  56   2          }
  57   1      
  58   1          ADC_CFG0 |= ADC_CHAN0_EN(0x1) | // 使能通道0转换
  59   1                      ADC_EN(0x1);        // 使能A/D转换
  60   1          delay_ms(1);                    // 等待adc稳定
  61   1      }
  62          
  63          // adc采集+滤波
  64          u16 adc_getval(void)
  65          {
  66   1          u8 i = 0; // adc采集次数的计数
  67   1          volatile u16 g_temp_value = 0;
  68   1          volatile u32 g_tmpbuff = 0;
  69   1          volatile u16 g_adcmax = 0;
  70   1          volatile u16 g_adcmin = 0xFFFF;
  71   1      
  72   1          // 采集20次，去掉前两次采样，再去掉一个最大值和一个最小值，再取平均值
  73   1          for (i = 0; i < 20; i++)
  74   1          {
  75   2              ADC_CFG0 |= ADC_CHAN0_TRG(0x1); // 触发ADC0转换
  76   2              while (!(ADC_STA & ADC_CHAN0_DONE(0x1)))
  77   2                  ;                                                 // 等待转换完成
  78   2              g_temp_value = (ADC_DATAH0 << 4) | (ADC_DATAL0 >> 4); // 读取 channel0 的值
  79   2              ADC_STA = ADC_CHAN0_DONE(0x1);                        // 清除ADC0转换完成标志位
  80   2      
  81   2              if (i < 2)
  82   2                  continue; // 丢弃前两次采样的
  83   2              if (g_temp_value > g_adcmax)
  84   2                  g_adcmax = g_temp_value; // 最大
  85   2              if (g_temp_value < g_adcmin)
  86   2                  g_adcmin = g_temp_value; // 最小
  87   2      
  88   2              g_tmpbuff += g_temp_value;
  89   2          }
  90   1      
  91   1          g_tmpbuff -= g_adcmax;           // 去掉一个最大
  92   1          g_tmpbuff -= g_adcmin;           // 去掉一个最小
  93   1          g_temp_value = (g_tmpbuff >> 4); // 除以16，取平均值
  94   1      
  95   1          return g_temp_value;
  96   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    299    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
